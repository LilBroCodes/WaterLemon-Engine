stage
{
    let
angle_x = 0;
let
angle_y = 0;
let
angle_z = 0;
let
angle_w = 0;
function
getObj()
{
    let
vertices = [[0.5171291164242093, 1.4397015602543621, 0.5004601638035708],
            [0.5171291164242093, 1.4397015602543621, -0.49953983619642917],
            [0.5171291164242093, -0.636608875154961, 0.5004601638035708],
            [0.5171291164242093, -0.636608875154961, -0.49953983619642917],
            [-0.48287088357579067, 1.4397015602543621, -0.49953983619642917],
            [-0.48287088357579067, 1.4397015602543621, 0.5004601638035708],
            [-0.48287088357579067, -0.636608875154961, -0.49953983619642917],
            [-0.48287088357579067, -0.636608875154961, 0.5004601638035708],
            [-0.48287088357579067, 1.4397015602543621, -0.49953983619642917],
            [0.5171291164242093, 1.4397015602543621, -0.49953983619642917],
            [-0.48287088357579067, 1.4397015602543621, 0.5004601638035708],
            [0.5171291164242093, 1.4397015602543621, 0.5004601638035708],
            [-0.48287088357579067, -0.636608875154961, 0.5004601638035708],
            [0.5171291164242093, -0.636608875154961, 0.5004601638035708],
            [-0.48287088357579067, -0.636608875154961, -0.49953983619642917],
            [0.5171291164242093, -0.636608875154961, -0.49953983619642917],
            [-0.48287088357579067, 1.4397015602543621, 0.5004601638035708],
            [0.5171291164242093, 1.4397015602543621, 0.5004601638035708],
            [-0.48287088357579067, -0.636608875154961, 0.5004601638035708],
            [0.5171291164242093, -0.636608875154961, 0.5004601638035708],
            [0.5171291164242093, 1.4397015602543621, -0.49953983619642917],
            [-0.48287088357579067, 1.4397015602543621, -0.49953983619642917],
            [0.5171291164242093, -0.636608875154961, -0.49953983619642917],
            [-0.48287088357579067, -0.636608875154961, -0.49953983619642917]];
let
faces = [[0, 2, 1], [2, 3, 1], [4, 6, 5], [6, 7, 5], [8, 10, 9], [10, 11, 9], [12, 14, 13], [14, 15, 13], [16, 18, 17],
         [18, 19, 17], [20, 22, 21], [22, 23, 21]];
return [vertices, faces]
}

actor
drawer
{
function
draw_triangle(triangle)
{
    let
posx_1 = triangle[0][0];
let
posy_1 = triangle[0][1];
let
posx_2 = triangle[1][0];
let
posy_2 = triangle[1][1];
let
posx_3 = triangle[2][0];
let
posy_3 = triangle[2][1];
this.setPosition(posx_1, posy_1);
pen.down();
this.setPosition(posx_2, posy_2);
this.setPosition(posx_3, posy_3);
this.setPosition(posx_1, posy_1);
pen.up();
}
function
draw_quad(quad)
{
    let
posx_1 = quad[0][0];
let
posy_1 = quad[0][1];
let
posx_2 = quad[1][0];
let
posy_2 = quad[1][1];
let
posx_3 = quad[2][0];
let
posy_3 = quad[2][1];
let
posx_4 = quad[3][0];
let
posy_4 = quad[3][1];
this.setPosition(posx_1, posy_1);
pen.down();
this.setPosition(posx_2, posy_2);
this.setPosition(posx_3, posy_3);
this.setPosition(posx_4, posy_4);
this.setPosition(posx_1, posy_1);
pen.up();
}
function
renderObj(vertices, faces, scale)
{
    let
drawn = 0;
for (let f = 0; f < faces.length; f++)
{
    let
points = [];
let
face = faces[f];
for (let v = 0; v < face.length; v++)
{
    let
vertex_index = face[v];
let
vert = vertices[vertex_index];
let
vx = vert[0];
let
vy = vert[1];
let
vz = vert[2];
vy -= 50;
let
vy_rotated_vx = vy * Math.cos(angle_x) - vz * Math.sin(angle_x);
let
vz_rotated_vx = vy * Math.sin(angle_x) + vz * Math.cos(angle_x);
let
vx_rotated_vy = vx * Math.cos(angle_y) + vz_rotated_vx * Math.sin(angle_y);
let
vz_rotated_vy = -vx * Math.sin(angle_y) + vz_rotated_vx * Math.cos(angle_y);
let
vx_projected = vx_rotated_vy * scale;
let
vy_projected = -vy_rotated_vx * scale;
let
vz_projected = vz_rotated_vy * scale;
points.push([vx_projected, vy_projected]);
}
this.draw_triangle(points);
drawn + +;
}
return drawn
}
when
stage.started
{
let
objData = getObj();
let
vertices = objData[0];
let
faces = objData[1];
while (true) {
if (isKeyPressed("left arrow") | | isKeyPressed("a")) {
angle_y -= 0.01;
}
if (isKeyPressed("right arrow") | | isKeyPressed("d")) {
angle_y += 0.01;
}
if (isKeyPressed("up arrow") | | isKeyPressed("w")) {
angle_x -= 0.01;
}
if (isKeyPressed("down arrow") | | isKeyPressed("s")) {
angle_x += 0.01;
}
if (isKeyPressed("q")) {
angle_z -= 0.01;
}
if (isKeyPressed("e")) {
angle_z += 0.01;
}
if (isKeyPressed("z")) {
angle_w -= 0.01;
}
if (isKeyPressed("c")) {
angle_w += 0.01;
}
this.say(this.renderObj(vertices, faces, 100));
}
}
}
}